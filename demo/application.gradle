// Copyright (c) 2012-2016 Saarland University
// All rights reserved.
//
// Author: Konrad Jamrozik, konrad.jamrozik@cispa.saarland
//
// This file is part of the "BotMate" project.
//
// github.com/konrad-jamrozik/botmate

assert serialPortWindowsNativeLibDir.isDirectory()
assert serialPortLinuxNativeLibDir.isDirectory()
assert serialPortMacOSNativeLibDir.isDirectory()

// ---------- Application configuration ----------

apply plugin: 'application'
mainClassName = "com.github.konrad_jamrozik.botmate.demo.MainKt"
applicationDefaultJvmArgs = ["-Djava.library.path=${serialPortNativeLibDir}"]

tasks.run { JavaExec it -> it.args = ["stubBoth"] }

// ---------- Distributions configuration ----------

def distributions = project.extensions.getByName("distributions") as DistributionContainer
def mainDist = distributions.findByName("main")

CopySpec windowsNativeContents = project.copySpec {into('libNative_Windows_x64') {from serialPortWindowsNativeLibDir}}
CopySpec linuxNativeContents = project.copySpec {into('libNative_Linux_x86_64') {from serialPortLinuxNativeLibDir}}
CopySpec macOSNativeContents = project.copySpec {into('libNative_MacOS') {from serialPortMacOSNativeLibDir}}

mainDist.contents.with(windowsNativeContents)
mainDist.contents.with(linuxNativeContents)
mainDist.contents.with(macOSNativeContents)

// ---------- Start scripts configuration ----------

/*
  The start scripts are modified to pick up appropriate native rxtx libs for given OS type. The path to the native libs is
  written out to the default JVM options in the scripts. This Gradle script first sets the native lib dir to the 
  SERIAL_PORT_NATIVE_LIB_DIR value which then it substitutes before writing out the actual scripts.
  
  For Windows batch script, this Gradle script just substitutes SERIAL_PORT_NATIVE_LIB_DIR with the dir of the native rxtx lib
  for Windows.
  
  For Unix shell script, this Gradle script substitutes SERIAL_PORT_NATIVE_LIB_DIR with NATIVE_LIB. NATIVE_LIB value is in turn
  determined in the shell script itself. It distinguishes between Mac OS and Linux.
  
 */

def scripts = tasks.startScripts as CreateStartScripts

scripts.defaultJvmOpts = ["-ea", "-Djava.library.path=../SERIAL_PORT_NATIVE_LIB_DIR"]

scripts.doLast { CreateStartScripts it ->
  it.windowsScript.text = it.windowsScript.text.replace('SERIAL_PORT_NATIVE_LIB_DIR', "libNative_Windows_x64")
}

String NATIVE_LIB_bash_var_def ="""
if [[ "\$OSTYPE" == "darwin"* ]]; then
    NATIVE_LIB='libNative_MacOS'
else
    NATIVE_LIB='libNative_Linux_x86_64'
fi
"""
scripts.doLast { CreateStartScripts it ->
  it.unixScript.text = it.unixScript.text.replace("#!/usr/bin/env bash\n","#!/usr/bin/env bash\n$NATIVE_LIB_bash_var_def")
  it.unixScript.text = it.unixScript.text.replace('SERIAL_PORT_NATIVE_LIB_DIR', "'\$NATIVE_LIB'")
}

